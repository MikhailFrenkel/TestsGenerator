using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGenerator
{
    public class Generator
    {
        public void Generate(string path)
        {
            try
            {
                string text = File.ReadAllText(path);
                SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(text);
                CompilationUnitSyntax compilationUnitSyntax = syntaxTree.GetCompilationUnitRoot();

                var classes = compilationUnitSyntax.DescendantNodes().OfType<ClassDeclarationSyntax>();

                foreach(var classDeclaration in classes)
                {
                    var publicMethods = classDeclaration.DescendantNodes().OfType<MethodDeclarationSyntax>()
                        .Where(x => x.Modifiers.Any(y => y.ValueText == "public"));

                    string ns = (classDeclaration.Parent as NamespaceDeclarationSyntax)?.Name.ToString();
                    string className = classDeclaration.Identifier.ValueText;
                    List<string> methodsName = new List<string>();
                    int count = 1;
                    foreach (var method in publicMethods)
                    {
                        var name = GetMethodName(methodsName, method.Identifier.ToString(), 0);
                        methodsName.Add(name);
                    }

                    var outputFile = "using Microsoft.VisualStudio.TestTools.UnitTesting;\n\n" 
                                     + "namespace " + ns + ".Test\n{\n\t[TestClass]\n\tpublic class "
                                     + className + "Test\n\t{";

                    foreach (var method in methodsName)
                    {
                        outputFile += "\n\t\t[TestMethod]\n\t\tpublic void " + method
                                      + "Test()\n\t\t{\n\t\t\tAssert.Fail(\"autogenerated\");\n\t\t}";
                    }

                    outputFile += "\n\t}\n}";

                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        private string GetMethodName(List<string>methods, string method, int count)
        {
            string res = method + (count == 0 ? "" : count.ToString());
            if (methods.Contains(res))
            {
                return GetMethodName(methods, method, count + 1);
            }

            return res;
        }
    }
}
